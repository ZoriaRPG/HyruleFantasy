// ffcscript.zh
// Version 2.0.1

#include "ffcscript.cfg"

// DEFAULT Combo to be used for generic script vehicle FFCs. This should be
// an invisible combo with no type or flag. It cannot be combo 0.
const int FFCS_INVISIBLE_COMBO 	= 1;

// DEFAULT Range of FFCs to use. Numbers must be between 1 and 32.
const int FFCS_MIN_FFC 		= 1;
const int FFCS_MAX_FFC 		= 32;

//Metadata
const float V_FFSCRIPT_H 	= 2.0001;
const int V_FFSCRIPT_H_YEAR 	= 2020;
const int V_FFSCRIPT_H_MONTH 	= 7;
const int V_FFSCRIPT_H_DAY 	= 31;
const int V_FFSCRIPT_H_HOUR 	= 19;
const int V_FFSCRIPT_H_MINUTE 	= 37;

int RunFFCScript(char32 ptr, untyped args)
{
	args = ( args < 0 ) ? NULL : args;
	unless ( IsValidArray(ptr) )
	{
		printf("Invalid string / pointer, passed to RunFFCScript(char32)\n");
		return 0;
	}
		
	int scriptNum = Game->GetFFCScript(ptr);
	//Invalid script
	if(scriptNum < 0 || scriptNum > 511)
	{
		printf("Invalid Script Name (%s) passed to RunFFCScript", scriptNum);
		return 0;
	}
	const int MIN = 0; //attibytes
	const int MAX = 1; //attibytes
	unless( args && IsValidArray(args) )
	{	
		args = NULL; //sanity guard against invalid arrays
		printf("Invlalid array passed to RunFFCScript(args)\n");
	}
	
	ffc theFFC = NULL;
	
	int ffscripth = NEVER_USE_COMBO_LABEL ? 0 : Game->GetCombo("FFCSCRIPTH");
	int inv = NEVER_USE_COMBO_LABEL ? 0 : Game->GetCombo("INVISIBLE");
	combodata c = ( ffscripth > 0 ) ? Game->LoadComboData(ffscripth) : NULL;
	int invisible = ( inv > 0 ) ? inv : FFCS_INVISIBLE_COMBO;
	int min = ( (c) ? c->Attribytes[MIN] : FFCS_MIN_FFC );
	int max = ( (c) ? c->Attribytes[MAX] : FFCS_MAX_FFC );

	// Find an FFC not already in use
	for( int i = min; i <= max; ++i )
	{
		theFFC=Screen->LoadFFC(i);
	
		if
		(
			theFFC->Script!=0 ||
			(theFFC->Data!=0 && theFFC->Data!=invisible) ||
			theFFC->Flags[FFCF_CHANGER]
		)
			continue;
	
		// Found an unused one; set it up
		theFFC->Data=inv;
		theFFC->Script=scriptNum;
		
		if (args)
		{
			for ( int j = Min(SizeOfArray(args), 8)-1; j >= 0; --j)
				theFFC->InitD[j] = args[j];
		}
	
		return i;
	}
	
	// No FFCs available
	return 0;
}

int RunFFCScript(int scriptNum, untyped args)
{
	args = ( args < 0 ) ? NULL : args;
	//Invalid script
	if(scriptNum < 0 || scriptNum > 511)
	{
		printf("Invalid script ID (%d) passed to RunFFCScript", scriptNum);
		return 0;
	}
	const int MIN = 0; //attibytes
	const int MAX = 1; //attibytes
	unless( args && IsValidArray(args) )
	{	
		args = NULL; //sanity guard against invalid arrays
		printf("Invlalid array passed to RunFFCScript(args)\n");
	}
	
	ffc theFFC = NULL;
	
	int ffscripth = NEVER_USE_COMBO_LABEL ? 0 : Game->GetCombo("FFCSCRIPTH");
	int inv = NEVER_USE_COMBO_LABEL ? 0 : Game->GetCombo("INVISIBLE");
	combodata c = ( ffscripth > 0 ) ? Game->LoadComboData(ffscripth) : NULL;
	int invisible = ( inv > 0 ) ? inv : FFCS_INVISIBLE_COMBO;
	int min = ( (c) ? c->Attribytes[MIN] : FFCS_MIN_FFC );
	int max = ( (c) ? c->Attribytes[MAX] : FFCS_MAX_FFC );

	// Find an FFC not already in use
	for( int i = min; i <= max; ++i )
	{
		theFFC=Screen->LoadFFC(i);
	
		if
		(
			theFFC->Script!=0 ||
			(theFFC->Data!=0 && theFFC->Data!=invisible) ||
			theFFC->Flags[FFCF_CHANGER]
		)
			continue;
	
		// Found an unused one; set it up
		theFFC->Data=inv;
		theFFC->Script=scriptNum;
		
		if (args)
		{
			for ( int j = Min(SizeOfArray(args), 8)-1; j >= 0; --j)
				theFFC->InitD[j] = args[j];
		}
	
		return i;
	}
	
	// No FFCs available
	return 0;
}

ffc RunFFCScriptOrQuit(char32 ptr, untyped args)
{
	unless ( IsValidArray(ptr) )
	{
		printf("Invalid string / pointer, passed to RunFFCScriptOrQuit(char32)\n");
		Quit();
	}
		
	int scriptNum = Game->GetFFCScript(ptr);
	// Invalid script
	if ( scriptNum < 0 || scriptNum > 511 )
	{
		printf("Invalid Script Name (%s) passed to RunFFCScriptOrQuit(char32)\n", ptr);
		Quit();
	}
        
    
	int ffcID = RunFFCScript(scriptNum, args);
	unless(ffcID)
	{	
		Quit();
	}
	return Screen->LoadFFC(ffcID);
}

ffc RunFFCScriptOrQuit(int scriptNum, untyped args)
{
	// Invalid script
	if ( scriptNum < 0 || scriptNum > 511 )
        {
		printf("Invalid Script number (%d) passed to RunFFCScriptOrQuit(int)\n", scriptNum);
		Quit();
	}
    
	int ffcID = RunFFCScript(scriptNum, args);
	unless(ffcID)
	{
		Quit();
	}
	return Screen->LoadFFC(ffcID);
}

int FindFFCRunning(char32 ptr)
{
	unless ( IsValidArray(ptr) )
	{
		printf("Invalid string / pointer, passed to FindFFCRunning(char32)\n");
		return 0;
	}
		
	int scriptNum = Game->GetFFCScript(ptr);
	// Invalid script
	if ( scriptNum < 0 || scriptNum > 511 )
	{
		printf("Invalid Script Name (%s) passed to FindFFCRunning(char32)\n", ptr);
		return 0;
	}
    
	ffc f;
    
	for(int i = 1; i <= 32; ++i)
	{
		f = Screen->LoadFFC(i);
		if ( f->Script == scriptNum )
		{
			return i;
		}
	}
    
	// No FFCs running it
	return 0;
}

int FindFFCRunning(int scriptNum)
{
	// Invalid script
	if ( scriptNum < 0 || scriptNum > 511 )
	{
		printf("Invalid Script number (%d) passed to FindFFCRunning(int)\n", scriptNum);
		return 0;
	}
    
	ffc f;

	for (int i = 1; i <= 32; ++i )
	{
		f = Screen->LoadFFC(i);
		if ( f->Script == scriptNum )
		{
			return i;
		}	
	}
    
	// No FFCs running it
	return 0;
}

int FindNthFFCRunning(char32 ptr, int n)
{
	
	unless ( IsValidArray(ptr) )
	{
		printf("Invalid string / pointer, passed to FindNthFFCRunning(char32)\n");
		return 0;
	}
		
	int scriptNum = Game->GetFFCScript(ptr);
	
	// Invalid script
	if ( scriptNum < 0 || scriptNum > 511 )
	{
		printf("Invalid Script Name (%s) passed to FindNthFFCRunning(char32)\n", ptr);
		return 0;
	}
    
	ffc f;
    
	for( int i = 1; i <= 32; ++i )
	{
		f = Screen->LoadFFC(i);
		if ( f->Script == scriptNum )
		{
			--n;
			unless(n)
			{
				return i;
			}
		}
	}
    
	// Not that many FFCs running it
	return 0;
}

int FindNthFFCRunning(int scriptNum, int n)
{
	// Invalid script
	if ( scriptNum < 0 || scriptNum > 511 )
	{
		printf("Invalid Script number (%d) passed to FindNthFFCRunning(int)\n", scriptNum);
		return 0;
	}
	ffc f;
    
	for ( int i = 1; i <= 32; ++i )
	{
		f = Screen->LoadFFC(i);
		if ( f->Script == scriptNum )
		{
			--n;
			unless(n)
			{
				return i;
			}
		}
	}
    
	// Not that many FFCs running it
	return 0;
}

int CountFFCsRunning(char32 ptr)
{
	// Invalid script
	unless ( IsValidArray(ptr) )
	{
		printf("Invalid string / pointer, passed to CountFFCsRunning(char32)\n");
		return 0;
	}
		
	int scriptNum = Game->GetFFCScript(ptr);
	
	// Invalid script
	if ( scriptNum < 0 || scriptNum > 511 )
	{
		printf("Invalid Script Name (%s) passed to CountFFCsRunning(char32)\n", ptr);
		return 0;
	}
	
	ffc f;
	int numFFCs = 0;
    
	for ( int i = 1; i <= 32; ++i )
	{
		f = Screen->LoadFFC(i);
		if ( f->Script == scriptNum )
		{
			++numFFCs;
		}
	}
    
	return numFFCs;
}

int CountFFCsRunning(int scriptNum)
{
	// Invalid script
	if ( scriptNum < 0 || scriptNum > 511 )
	{
		printf("Invalid Script number (%d) passed to CountFFCsRunning(int)\n", scriptNum);
		return 0;
	}
	
	ffc f;
	int numFFCs = 0;
    
	for ( int i = 1; i <= 32; ++i )
	{
		f = Screen->LoadFFC(i);
		if ( f->Script == scriptNum )
		{
			++numFFCs;
		}
	}
    
	return numFFCs;
}

